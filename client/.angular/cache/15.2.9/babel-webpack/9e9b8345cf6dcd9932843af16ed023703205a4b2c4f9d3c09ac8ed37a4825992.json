{"ast":null,"code":"var _class;\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/form-field\";\nfunction SignupComponent_mat_error_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"UserName is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SignupComponent_mat_error_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, SignupComponent_mat_error_3_div_1_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.signUpForm.get(\"username\")) == null ? null : tmp_0_0.hasError(\"required\"));\n  }\n}\nexport class SignupComponent {\n  constructor(router, fb) {\n    this.router = router;\n    this.fb = fb;\n    this.submitted = false;\n    this.signUpForm = this.fb.group({\n      username: ['', [Validators.required]],\n      name: ['', [Validators.required]],\n      contact: ['', [Validators.required]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]],\n      confirmP: ['', [Validators.required]]\n    });\n  }\n  ngOnInit() {}\n  toLogin() {\n    this.router.navigate(['/']);\n  }\n  signupSubmit() {\n    this.submitted = true;\n    console.log(this.signUpForm);\n  }\n}\n_class = SignupComponent;\n_class.ɵfac = function SignupComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-signup\"]],\n  decls: 4,\n  vars: 1,\n  consts: [[1, \"example-form\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"username\", \"placeholder\", \"Username\"], [4, \"ngIf\"]],\n  template: function SignupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-form-field\");\n      i0.ɵɵelement(2, \"input\", 1);\n      i0.ɵɵtemplate(3, SignupComponent_mat_error_3_Template, 2, 1, \"mat-error\", 2);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      let tmp_0_0;\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_0_0 = ctx.signUpForm.get(\"username\")) == null ? null : tmp_0_0.invalid) && ((tmp_0_0 = ctx.signUpForm.get(\"username\")) == null ? null : tmp_0_0.touched));\n    }\n  },\n  dependencies: [i3.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormControlName, i2.NgForm, i4.MatInput, i5.MatFormField, i5.MatError],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;;ICyD7DC,2BAA8D;IAAAA,oCAAoB;IAAAA,iBAAM;;;;;IAD1FA,iCAA8F;IAC5FA,4EAAwF;IAC1FA,iBAAY;;;;;IADJA,eAAsD;IAAtDA,kHAAsD;;;ADjDlE,OAAM,MAAOC,eAAe;EAK1BC,YACUC,MAAc,EACdC,EAAe;IADf,WAAM,GAAND,MAAM;IACN,OAAE,GAAFC,EAAE;IAJZ,cAAS,GAAY,KAAK;IAMtB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MAC9BC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,CAAC,CAAC;MACrCC,IAAI,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACS,QAAQ,CAAC,CAAC;MACjCE,OAAO,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACS,QAAQ,CAAC,CAAC;MACpCG,KAAK,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACY,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACS,QAAQ,CAAC,CAAC;MACrCK,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACS,QAAQ,CAAC;KACrC,CAAC;EACN;EAEAM,QAAQ,IAER;EAEAC,OAAO;IACL,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;EAEAC,YAAY;IACV,IAAI,CAACC,SAAS,GAAG,IAAI;IACrBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACf,UAAU,CAAC;EAC9B;;SA9BWJ,eAAe;;mBAAfA,MAAe;AAAA;;QAAfA,MAAe;EAAAoB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MC6C5BzB,+BAA2B;MAEvBA,2BAAgF;MAChFA,4EAEY;MACdA,iBAAiB;;;;MAHHA,eAAgF;MAAhFA,qLAAgF","names":["Validators","i0","SignupComponent","constructor","router","fb","signUpForm","group","username","required","name","contact","email","password","confirmP","ngOnInit","toLogin","navigate","signupSubmit","submitted","console","log","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["D:\\Real project\\client\\src\\app\\components\\signup\\signup.component.ts","D:\\Real project\\client\\src\\app\\components\\signup\\signup.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent implements OnInit {\n\n  signUpForm: FormGroup;\n  submitted: boolean = false;\n\n  constructor(\n    private router: Router,\n    private fb: FormBuilder\n  ) {\n      this.signUpForm = this.fb.group({\n        username: ['', [Validators.required]],\n        name: ['', [Validators.required]],\n        contact: ['', [Validators.required]],\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required]],\n        confirmP: ['', [Validators.required]]\n      })\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  toLogin() {\n    this.router.navigate(['/'])\n  }\n\n  signupSubmit() {\n    this.submitted = true;\n    console.log(this.signUpForm);\n  }\n\n}\n","<!-- <div class=\"container\">\n  <div id=\"login-box\">\n    <div class=\"left\">\n      <h1 class=\"text-secondary\">Create Account</h1>\n\n      <form [formGroup]=\"signUpForm\" (ngSubmit)=\"signupSubmit()\">\n        <input type=\"text\" name=\"username\" formControlName=\"username\" class=\"form-control\" placeholder=\"Username\" />\n        <div class=\"text-danger\" *ngIf=\"submitted || signUpForm.controls['username']?.invalid && signUpForm.controls['username'].touched\">\n          <div *ngIf=\"signUpForm.controls['username']?.errors?.['required']\">UserName is required</div>\n        </div>\n\n        <input type=\"text\" name=\"name\" formControlName=\"name\" class=\"form-control\" placeholder=\"Name\" />\n        <div class=\"text-danger\" *ngIf=\"submitted || signUpForm.controls['name']?.invalid && signUpForm.controls['name'].touched\">\n          <div *ngIf=\"signUpForm.controls['name']?.errors?.['required']\">Name is required</div>\n        </div>\n\n        <input type=\"text\" name=\"contact\" formControlName=\"contact\" class=\"form-control\" placeholder=\"Contact\" />\n        <div class=\"text-danger\" *ngIf=\"submitted || signUpForm.controls['contact']?.invalid && signUpForm.controls['contact'].touched\">\n          <div *ngIf=\"signUpForm.controls['contact']?.errors?.['required']\">Contact is required</div>\n        </div>\n\n        <input type=\"text\" name=\"email\" formControlName=\"email\" class=\"form-control\" placeholder=\"E-mail\" />\n        <div class=\"text-danger\" *ngIf=\"submitted || signUpForm.controls['email']?.invalid && signUpForm.controls['email'].touched\">\n          <div *ngIf=\"signUpForm.controls['email']?.errors?.['required']\">Email is required</div>\n        </div>\n\n        <input type=\"password\" name=\"password\" formControlName=\"password\" class=\"form-control\" placeholder=\"Password\" />\n        <div class=\"text-danger\" *ngIf=\"submitted || signUpForm.controls['password']?.invalid && signUpForm.controls['password'].touched\">\n          <div *ngIf=\"signUpForm.controls['password']?.errors?.['required']\">Password is required</div>\n        </div>\n\n        <input type=\"password\" name=\"confirmp\" formControlName=\"confirmP\" class=\"form-control\" placeholder=\"Retype password\" />\n        <div class=\"text-danger\" *ngIf=\"submitted || signUpForm.controls['confirmP']?.invalid && signUpForm.controls['confirmP'].touched\">\n          <div *ngIf=\"signUpForm.controls['confirmP']?.errors?.['required']\">Confirm password is required</div>\n        </div>\n\n        <button class=\"btn btn-success\" type=\"submit\">Create account</button>\n        <span (click)=\"toLogin()\" class=\"text-primary\" style=\"cursor: pointer;\">\n          Already have an account?\n        </span>\n      </form>\n    </div>\n\n    <div class=\"right\">\n      <span class=\"loginwith text-secondary\">Sign in with<br />social network</span>\n\n      <button class=\"social-signin facebook\">Log in with facebook</button>\n      <button class=\"social-signin twitter\">Log in with Twitter</button>\n      <button class=\"social-signin google\">Log in with Google+</button>\n    </div>\n  </div>\n</div> -->\n\n\n<form class=\"example-form\">\n  <mat-form-field>\n    <input matInput type=\"text\" formControlName=\"username\" placeholder=\"Username\" />\n    <mat-error *ngIf=\"signUpForm.get('username')?.invalid && signUpForm.get('username')?.touched\">\n      <div *ngIf=\"signUpForm.get('username')?.hasError('required')\">UserName is required</div>\n    </mat-error>\n  </mat-form-field>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}