{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.baseUrl;\n    this.headers = new HttpHeaders({\n      'content-type': 'application/json'\n    });\n  }\n  // Get users\n  getUsers() {\n    return this.http.get(`${this.apiUrl}`);\n  }\n  // Create user\n  createUser(auth) {\n    return this.http.post(`${this.apiUrl}`, auth, {\n      headers: this.headers,\n      observe: 'response'\n    }).pipe(catchError(error => {\n      console.error('Error creating user', error);\n      throw error;\n    }));\n  }\n  // Login api\n  login(email, password) {\n    const loginData = {\n      email,\n      password\n    };\n    return this.http.post(`${this.apiUrl}/login`, loginData, {\n      headers: this.headers\n    }).pipe(tap(res => {\n      if (res && res.token) {\n        localStorage.setItem('token', res.token);\n      }\n    }), catchError(err => {\n      console.error('Error During login', err);\n      throw err;\n    }));\n  }\n  // Add a method to check if the user is logged in\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  // Add a method to log the user out\n  logout() {\n    localStorage.removeItem('token');\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAAA,SAAqBA,WAAW,QAAsB,sBAAsB;AAE5E,SAAqBC,UAAU,EAAEC,GAAG,QAAQ,MAAM;AAClD,SAASC,WAAW,QAAQ,8BAA8B;;;AAM1D,OAAM,MAAOC,WAAW;EAOtBC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANN,WAAM,GAAGH,WAAW,CAACI,OAAO;IACpC,YAAO,GAAgB,IAAIP,WAAW,CAAC;MACrC,cAAc,EAAE;KACjB,CAAC;EAIE;EAEJ;EACAQ,QAAQ;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,EAAE,CAAC;EAC/C;EAEA;EACAC,UAAU,CAACC,IAAU;IACnB,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAoB,GAAG,IAAI,CAACH,MAAM,EAAE,EAAEE,IAAI,EAAE;MAC/DE,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,OAAO,EAAE;KACV,CAAC,CAACC,IAAI,CACLf,UAAU,CAACgB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEA;EACAE,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,SAAS,GAAG;MAAEF,KAAK;MAAEC;IAAQ,CAAE;IACrC,OAAO,IAAI,CAACf,IAAI,CAACO,IAAI,CAAM,GAAG,IAAI,CAACH,MAAM,QAAQ,EAAEY,SAAS,EAAE;MAC5DR,OAAO,EAAE,IAAI,CAACA;KACf,CAAC,CAACE,IAAI,CACLd,GAAG,CAACqB,GAAG,IAAG;MACR,IAAGA,GAAG,IAAIA,GAAG,CAACC,KAAK,EAAE;QACnBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,GAAG,CAACC,KAAK,CAAC;;IAE5C,CAAC,CAAC,EACFvB,UAAU,CAAC0B,GAAG,IAAG;MACfT,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEU,GAAG,CAAC;MACxC,MAAMA,GAAG;IACX,CAAC,CAAC,CACH;EACH;EAEE;EACAC,UAAU;IACR,OAAO,CAAC,CAACH,YAAY,CAACI,OAAO,CAAC,OAAO,CAAC;EACxC;EAEA;EACAC,MAAM;IACJL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;EAClC;;SAvDS3B,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAA4B,SAAX5B,MAAW;EAAA6B,YAFV;AAAM","names":["HttpHeaders","catchError","tap","environment","AuthService","constructor","http","baseUrl","getUsers","get","apiUrl","createUser","auth","post","headers","observe","pipe","error","console","login","email","password","loginData","res","token","localStorage","setItem","err","isLoggedIn","getItem","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["D:\\Real project\\client\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Auth } from 'src/model/auth.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private apiUrl = environment.baseUrl;\n  headers: HttpHeaders = new HttpHeaders({\n    'content-type': 'application/json'\n  });\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  // Get users\n  getUsers(): Observable<any> {\n    return this.http.get<any[]>(`${this.apiUrl}`)\n  };\n\n  // Create user\n  createUser(auth: Auth): Observable<HttpResponse<any>> {\n    return this.http.post<HttpResponse<any>>(`${this.apiUrl}`, auth, {\n      headers: this.headers,\n      observe: 'response'\n    }).pipe(\n      catchError(error => {\n        console.error('Error creating user', error);\n        throw error;\n      })\n    )\n  };\n\n  // Login api\n  login(email: string, password: string): Observable<any> {\n    const loginData = { email, password };\n    return this.http.post<any>(`${this.apiUrl}/login`, loginData, {\n      headers: this.headers\n    }).pipe(\n      tap(res => {\n        if(res && res.token) {\n          localStorage.setItem('token', res.token);\n        }\n      }),\n      catchError(err => {\n        console.error('Error During login', err);\n        throw err;\n      })\n    );\n  };\n\n    // Add a method to check if the user is logged in\n    isLoggedIn(): boolean {\n      return !!localStorage.getItem('token');\n    }\n\n    // Add a method to log the user out\n    logout(): void {\n      localStorage.removeItem('token');\n    }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}